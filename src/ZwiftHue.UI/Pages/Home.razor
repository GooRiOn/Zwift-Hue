@page "/"
@inject ApiClient ApiClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


@using ZwiftHue.UI.Clients
@using ZwiftHue.UI.Models
@using ZwiftHue.UI.Models.Write

@if (profile is null)
{
    <EditForm Model="@model" OnValidSubmit="Login">
        <DataAnnotationsValidator/>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Email" Class="mt-3" @bind-Value="model.Email" For="@(() => model.Email)"/>
                        <MudTextField Label="Password"  Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" Class="ml-auto">Login</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
}
else
{
    <H1>HELLO @profile.FirstName!</H1>
    <br/>
    <H3>Current FTP: @profile.Ftp W</H3>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="() => StartActivity()">Start Activity</MudButton>
}


@code {
    RiderLoginModel model = new();
    ZwiftProfileDto? profile;

    protected override async Task OnInitializedAsync()
    {
        await GetProfileAsync();
        await base.OnInitializedAsync();
    }

    private async Task Login(EditContext context)
    {
        var isSuccesfull = await ApiClient.LoginAsync(model);

        if (isSuccesfull)
        {
            await GetProfileAsync();
        }
        
        StateHasChanged();
    }

    private async Task GetProfileAsync()
    {
        profile = await ApiClient.GetProfileAsync();
        
        if (profile is null)
        {
            return;
        }
        await LocalStorage.SetItemAsync("profile", profile);
    }
    
    private async Task StartActivity()
    {
        await ApiClient.StartActivityAsync(profile.Id);
    }
}